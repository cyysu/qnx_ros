/!\ Note that this doc is INCOMPLETE

<<TableOfContents(3)>>

Note that the command prompt on `QNX` when you're `root` is "#".

''Authors / Contributors: Isaac Isao Saito (START project at [[http://www.jsk.t.u-tokyo.ac.jp|JSK Lab, University of Tokyo]]), Stefan May (Nuremberg Institute of Technology Georg Simon Ohm - http://www.th-nuernberg.de)''

= Disclaimer =
 * (August 2013) A successful attempt of installing ros_comm on a QNX system has been almost achieved (just 3 of 46 packages failed, rosmaster is executable).
 * (June 2013) Currently it is planned that this page will only describe/link to installation of [[catkin]] on `QNX` Realtime OS, which means porting the eintire `ROS` on `QNX` is not fully planned yet.
 * Some of the things noted in this page are not necessarilly geared toward `ROS`. That should appear in [[#Miscellaneous_library|section "Miscellaneous library"]].

= Preparing QNX =
Following components need to be installed step-by-step (ie. in the order as they are written although you may be able to install them in a different order).

== Assumption ==
- Set up the `QNX` environment as a virtual machine (assuming self hosting isn't that different)

 . - `VMWare Player` 5.0 is used

== Obtain license ==
Independent consultant can get a license for free by registration. For example, if you're and want to use `QNX` as an independent consultant, [[http://www.qnx.com/products/evaluation/independent_consultant.html|register here]]. Anything else is (TBD).

== Create a new VM with QNX image ==
Download `QNX` image: [[http://www.qnx.com/download/feature.html?programid=21182|QNX® Software Development Platform 6.5.0 [Build 201007091524] — QNX Neutrino RTOS Installation and Boot CD (X86-only)]]

On VMWare Player, create a new VM using `.iso` file. It might yield message similar to this:

{{{
Could not detect which operating system is in this image. You will need to specify which operating system will be installed.
}}}
Select "Next". Choose "Other"-"Other" at "Guest Operating System. Configure the rest no matter how you wish.

Once login window launches, login as `SuperUser`.

Here are also some nice configs on QNX.

=== Create user ===
From the panel (likely on your right on `QNX` desktop), "Configure" --> "Users", and follow the GUI. Use `/bin/sh` since other common shells might not be available by default (otherwise you can't login to this user without the reason being told).

=== Set up SSH server ===
You might want to set up `ssh` ([[http://profetes.pl/2010/03/13/configure-qnx-6-4-1-sshd/|useful link]]). Note that you might have to use your own user (it seems `root` user might not be able to login over `ssh`).

== Install QNX service pack 1 (SDP SP1) ==
Get the [[http://community.qnx.com/sf/discussion/do/listPosts/projects.community/discussion.community.topc23726|installer]] and run on your `QNX`.

== Install pkgsrc ==
There are 2 ways to install `pkgsrc`, a package manager that we heavily depend on in this instruction.

 * via QNX user's community.
  * Maintained more frequently.
  * A little more installation steps.
 * via OpenRTM installer.
  * Fewer installation steps.
  * Maintained less frequently.
  * Uses up extra disk space.

Following sub sections explain how to install in each way.

=== pkgsrc via QNX user's community ===
Install [[http://community.qnx.com/sf/projects/pkgsrc/|pkgsrc]]. Follow [[http://community.qnx.com/sf/wiki/do/viewPage/projects.pkgsrc/wiki/Bootstrap|bootstrap]]. Don't forget setting up environment as noted. You can run the sequence of commands similar to this:

{{{
$ su
# export PATH=/usr/pkg/bin:/usr/pkg/sbin:$PATH
# export CS_LIBPATH=/usr/pkg/lib
# echo $CS_LIBPATH
/usr/pkg/lib
# cd /usr/share && mkdir pkgsrc && cd pkgsrc  (since I'm installing pkgsrc at /usr/share/pkgsrc)
# svn checkout --username your@domain.org http://community.qnx.com/svn/repos/pkgsrc/HEAD_650  (will take a while depending on the internet connection)
# cd bootstrap  && ./bootstrap
}}}
`%PKGSRC_HOME%` is the path (absolute or relative) to your `pkgsrc` directory (eg. in my case `/usr/share/pkgsrc`).

Replace `your@domain.org` with your account you created on `qnx.com`.

=== pkgsrc via OpenRTM ===
Alternatively, you can install `pkgsrc` via [[http://openrtm.org/|OpenRTM]], which is yet another robotics software platform. Its installer provides tailored `pkgsrc` and simpler installation steps as follows:

{{{
 # export PKG_PATH=http://www.openrtm.org/pub/pkgsrc/packages/QNX/i386/6.5.0/All
 # pkg_add -v OpenRTM-aist-1.1.0-RELEASE
 Running install with PRE-INSTALL for omniORB-4.1.6.
 bin/omkdepend
 bin/omnicpp
   : (here installs omniORB)
 man/man1/omniidl.1
 Running install with PRE-INSTALL for omniORB-4.1.6.
 Package omniORB-4.1.6 registered in /var/db/pkg/omniORB-4.1.6
   : (here installs OpenRTM-aist)
 lib/libcoil.so
 lib/libcoil.la
 lib/libcoil-1.1.0.so
 　:
 share/openrtm-1.1/doc/IDLReference-en/html/unionSDOPackage_1_1Numeric.html
 etc/rtc.conf.sample
 Package OpenRTM-aist-1.1.0-RELEASE registered in /var/db/pkg/OpenRTM-aist-1.1.0-RELEASE
 #
 # pkg_info|grep OpenRTM
 OpenRTM-aist-1.1.0-RELEASE RT-Middleware and OMG RTC framework
}}}
== Required / useful tools ==
=== Install python 2.7 via pkgsrc ===
Since `QNX` 6.5.0 comes with python 2.5 that is not supported by ROS Groovy, we need newer python.

{{{
# cd %PKGSRC_HOME%/lang/python27
# bmake
# bmake install
# ln -f -s /usr/pkg/bin/python2.7 /usr/qnx650/host/qnx6/x86/usr/bin/python  (NOTE: This last step is hacky. Needs better solution.)
}}}
=== Install pkg-config via pkgsrc ===
{{{
# cd %PKGSRC_HOME%/devel/pkg-config
# bmake
# bmake install
=> Bootstrap dependency digest>=20010302: found digest-20121220
===> Checking for vulnerabilities in pkg-config-0.28
===> Install binary package of pkg-config-0.28
pkg_add: package `pkg-config-0.28' already recorded as installed
# pkg-config --version
0.28
}}}
=== git client ===
/!\ installing `git` client hasn't been successful yet. Update is appreciated!

source install  http://git-scm.com/book/en/Getting-Started-Installing-Git

 . curl, zlib, openssl, expat, and libiconv

openssl missing. Just go on. get source from http://git-scm.com/download

= Prepare ROS system dependency =
== For Catkin ==
=== cmake ===
{{{
# cd %PKGSRC_HOME%/devel/cmake
# bmake && bmake install
}}}
=== empy ===
{{{
# cd %PKGSRC_HOME%/textproc/py-empy/
# bmake && bmake install
}}}
=== nose ===
{{{
# cd %PKGSRC_HOME%/devel/py-nose/
# bmake && bmake install
}}}
=== expat ===
{{{
# cd %PKGSRC_HOME%/devel/py-expat/
# bmake && bmake install
}}}
=== distribute (prereq for pip) ===
[[http://www.pip-installer.org/en/latest/installing.html|pip]] requires either `setuptools` or [[https://pypi.python.org/pypi/distribute|distribute]]. Although the former is included in `pkgsrc`, its installation seems problematic (see faq). So we use `distribute`.

=== pip (prereq for catkin_pkg) ===
[[http://www.pip-installer.org/en/latest/installing.html|Installation of pip]]

=== catkin_pkg ===
{{{
# pip install catkin_pkg
# pip freeze
:
catkin-pkg==0.1.15
:
# find /usr -iname '*catkin*'     (these files get installed)
/usr/pkg/bin/catkin_create_pkg
/usr/pkg/bin/catkin_generate_changelog
/usr/pkg/bin/catkin_tag_changelog
/usr/pkg/bin/catkin_test_changelog
/usr/pkg/lib/python2.7/site-packages/catkin_pkg
/usr/pkg/lib/python2.7/site-packages/catkin_pkg-0.1.15-py2.7.egg-info
}}}
It might be important NOT to use `-U` option for `pip` (see [[http://answers.ros.org/question/65754/error-errno-89-function-not-implemented-while-source-installing-catkin_pkg/|this thread]]).

=== gtest ===
There's `google-test` in `pkgsrc`/devel, but unfortunately that's not tried here (actually it is possible that using `gtest` from `pkgsrc` might be easier). Here instead we manually download its source and install it.

`gtest` should NOT to be pre-build ([[https://github.com/ros/catkin/issues/157|ref.]]). Thus, we only download and place it into an appropriate location.

{{{
# svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only
# mv googletest-read-only %CATKIN_WORKSPACE_ROOT%/src/gtest
}}}
=== mktemp ===
{{{
# cd %PKGSRC_HOME%/sysutils/mktemp
# bmake && bmake install
}}}
=== boost ===
{{{
# cd %PKGSRC_HOME%/devel/boost-headers && bmake && bmake install
# cd %PKGSRC_HOME%/devel/boost-jam && bmake && bmake install
# cd %PKGSRC_HOME%/devel/boost-build && bmake && bmake install
}}}
==== boost-libs ====
`boost-libs` is also needed, but you might need to tweak when you get error by the follwoing command similar to the one that's used for other `boost` components. Workarounds are introduced in subsequent sections.

{{{
# cd %PKGSRC_HOME%/devel/boost-libs && bmake && bmake install
}}}
===== Build boost-libs from source =====
The source tarballs from http://www.boost.org can be compiled in version 1.53. A few source modifications might be necessary:

{{{
in boost/atomic/detail/base.hpp add
#include <stddef.h>

in boost/smart_ptr/make_shared_array.hpp add
#include <stddef.h>

in boost/test/impl/execution_monitor.ipp add
#include <stdarg.h>
}}}
Then execute the following commands

{{{
# ./bootstrap.sh
# ./b2
# cp stage/lib/libboost_* /usr/pkg/lib
}}}
===== Using pre-compiled binary =====
Download appropriate/latest version of `boost-libs` from [[http://ftp.jaist.ac.jp/pub/pkgsrc/current/pkgsrc/devel/boost-libs/|jaist's web site]] (where they packaged boost into their `pkgsrc` package for `OpenRTM`). Author used `i386:      boost-libs-1.53.0.tgz   (NetBSD 6.0)`, which seems to work fine so far.

{{{
# tar xfvz boost-libs-1.53.0.tgz
# cd lib/
# cp ./libboost_* /usr/pkg/lib
}}}
/!\ This has side effects for sure, if compiling ROS packages! Compiling the source tarball is the prefered way

=== tinyxml ===
Download source from [[http://sourceforge.net/projects/tinyxml/|here]] and unzip it. Then do the following:

{{{
# cd %HOME_TINYXML_SRC%
# make
# g++ -fPIC -shared -o libtinyxml.so *.o
# cp libtinyxml.so  /usr/pkg/lib
# cp tiny*.h /usr/pkg/include
}}}
=== log4cxx ===
{{{
# cd %PKGSRC_HOME%/devel/log4cxx && bmake && bmake install
}}}
If the command above didn't pass, search in [[groovy/Installation/QNX#Troubleshoot]].

== ROS itself ==
With the same reason where `pip` had to be run one-by-one for each package on `QNX` (which is strange but no solution found yet) when [[#catkin_pkg|installing catkin_pkg]], we need to run `pip` for several times.

{{{
# pip install pyyaml
# pip install vcstools
# pip install wstool
# pip install rosinstall
# pip install rosdistro
# pip install rospkg
# pip install rosdistro
# pip install rosinstall
# pip install wstool
# pip install rosdistro
}}}
{{{
# rosdep init
# rosdep update
}}}
{{{
# rosdep install --from-paths src --ignore-src --rosdistro groovy -y
}}}
(7/11/2013) The `rosdep` command above doesn't run yet. `rosdep` keys need tailored for `QNX`. [[https://groups.google.com/forum/#!topic/ros-sig-embedded/cak1-QNevgo|Link to the discussion about this]].

For the moment, an installation of ros_comm from source is possible with a few modifications. Do the following changes:

... in src/catkin/cmake/tools/rt.cmake comment out

{{{
# find_library(RT_LIBRARY rt)
# assert_file_exists(${RT_LIBRARY} "RT Library")
}}}
... in src/roslib/CMakeLists.txt comment out

{{{
# target_link_libraries(roslib rt)
}}}
... in src/rosout/CMakeLists.txt add

{{{
link_directories(/usr/pkg/lib)
}}}
Then start compilation with

{{{
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/pkg/lib
# ./src/catkin/bin/catkin_make_isolated --install
}}}
The compilation will complain mostly about undefined functions. Missing header declarations are going to be patched soon. For the moment, you need to do it by hand.

The packages message_filters, rosbag and topic_tools cannot be compiled yet. Move them out of the source folder for the moment.

= Miscellaneous library =
== Build omniORB (option) ==
`omniORB` is not required if you're using `ROS` only. This section is basically for those who combine with `OpenRTM`.

To install from public omniORB repository, (TBD).

To install it via `OpenRTM`, follow [[groovy/Installation/QNX#pkgsrc_via_OpenRTM]] to install `OpenRTM`.

Once you have either binary or source of `omniORB` on your `QNX`, follow the install instruction that should be available in `%TOP_OMNIORB%/README.unix`.

= Troubleshoot =
== svn checkout on QNX doesn't proceed after authentication ==
You might want to reboot the OS and try again.

== bmake pkg-config might complain "already installed as dependency" ==
{{{
# cd pkgsrc/devel/pkg-config
# bmake
# bmake install
WARNING: To fix run: `/usr/pkg/sbin/pkg_admin -K /var/db/pkg fetch-pkg-vulnerabilities'.
==> Install binary package of pkg-config-0.28
:
pkg_add: package `pkg-config-0.28' was already installed as dependency, now marked as installed manually
}}}
Make sure your terminal has this environment variable already set (in a single line although you might see the following in multiple lines):

{{{
# export MALLOC_BAND_CONFIG_STR="8:16,32,0:24,32,0:32,32,0:48,24,0:64,24,0:80,24,0:96,16,0:128,8,0"
}}}
== Building cmake fails with ==
{{{
# cd cmake && bmake
:
Package libarchive-2.8.4nb1 has a multiple-vulnerabilities vulnerability, see http://secunia.com/advisories/47049/
ERROR: Define ALLOW_VULNERABLE_PACKAGES in mk.conf or IGNORE_URL in pkg_install.conf(5) if this package is absolutely essential.
*** Error code 1

Stop.
bmake: stopped in %PKGSRC_HOME%/archivers/libarchive
*** Error code 1

Stop.
bmake: stopped in %PKGSRC_HOME%/devel/cmake
}}}
== -pthread is not available as an argument of g++ ==
== Error in xml python script ==
comment

{{{
#from xml.etree.ElementTree import *
}}}
in /usr/pkg/lib/python2.7/xml/etree/cElementTree.py and add

{{{
from xml.etree.ElementTree import *
}}}
== bmake log4cxx error ==
{{{
# cd %PKGSRC_HOME%/devel/log4cxx && bmake
:
if c++ -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"log4cxx\" -DVERSION=\"0.10.0\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DHAVE_MBSRTOWCS=1 -DHAVE_WCSTOMBS=1 -DHAVE_SYSLOG=1 -DHAVE_FWIDE=1  -I. -I. -I../../../src/main/include -I../../../src/main/include  -I/usr/pkg/include/apr-1 -I/usr/pkg/include -I/usr/include  -D_LARGEFILE64_SOURCE  -I/usr/pkg/include/apr-1   -I/usr/pkg/include/apr-1 -I/usr/pkg/include  -O2 -I/usr/pkg/include/apr-1 -I/usr/pkg/include -I/usr/include -MT console.o -MD -MP -MF ".deps/console.Tpo" -c -o console.o console.cpp; \
        then mv -f ".deps/console.Tpo" ".deps/console.Po"; else rm -f ".deps/console.Tpo"; exit 1; fi
console.cpp: In function 'int main(int, char**)':
console.cpp:59: error: 'puts' was not declared in this scope
console.cpp:67: error: 'stderr' was not declared in this scope
console.cpp:67: error: 'stdout' was not declared in this scope
console.cpp:67: error: 'fputs' was not declared in this scope
console.cpp:70: error: 'stderr' was not declared in this scope
console.cpp:70: error: 'stdout' was not declared in this scope
console.cpp:103: error: 'stderr' was not declared in this scope
console.cpp:103: error: 'stdout' was not declared in this scope
console.cpp:105: error: 'stderr' was not declared in this scope
console.cpp:105: error: 'stdout' was not declared in this scope
console.cpp:108: error: 'stderr' was not declared in this scope
console.cpp:108: error: 'fputs' was not declared in this scope
console.cpp:111: error: 'fflush' was not declared in this scope
make[3]: *** [console.o] Error 1
make[3]: Leaving directory `/usr/share/pkgsrc/devel/log4cxx/work/apache-log4cxx-0.10.0/src/examples/cpp'
make[2]: *** [all-recursive] Error 1
make[2]: Leaving directory `/usr/share/pkgsrc/devel/log4cxx/work/apache-log4cxx-0.10.0/src/examples'
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory `/usr/share/pkgsrc/devel/log4cxx/work/apache-log4cxx-0.10.0/src'
make: *** [all-recursive] Error 1
*** Error code 2

Stop.
bmake: stopped in /usr/share/pkgsrc/devel/log4cxx
*** Error code 1

Stop.
bmake: stopped in /usr/share/pkgsrc/devel/log4cxx
}}}
The workaround is:

{{{
in work/apache-log4cxx-0.10.0/src/examples/cpp/console.cpp add
#include <stdio.h>
}}}
If that fails, do the following:

{{{
# cd %PKGSRC_HOME%/devel/log4cxx/work/apache-log4cxx-0.10.0/src/examples/cpp
# mv console.cpp console.cpp.org
# vi Makefile
}}}
Then remove all console* related definition in `Makefile` (example entire file will be available).

Now `bmake` should run without errors. Obviously there might be side-effects though...

= Support =
Feel free to modify this wiki page as it's open to public. When you find issues to discuss, please consider following continuing at channels:

 * opening a ticket at [[https://github.com/start-jsk/ros_qnx/issues|issue / feature tracker at START project]]
 * opening discussion at [[https://groups.google.com/forum/#!forum/ros-sig-embedded|ROS SIG for Embedded]]
